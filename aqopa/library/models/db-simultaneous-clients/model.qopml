functions {
    fun nonce() (create nonce);
    fun s_enc(data, key) (symmetric encryption of data with key);
    fun s_dec(data, key) (symmetric decryption of data with key);
    fun sign(data, s_key) (sign data with secret key s_key);
    fun a_enc(data, p_key) (asymmetric encryption of data with public key p_key);
    fun a_dec(data, s_key) (asymmetric decryption of data with secret key s_key);
    fun pkey(skey) (get public key for secret key skey);
    fun skey() (generate secret key);
    fun hash(data) (calculate hash of data);
    fun id_c() (generate identification of Client);
    fun query() (generate searching query);
    fun database() (create non-encrypted database);
    fun key_request() (create key request);
    fun key_response() (create key response);
    fun get_db_key(key) (retrieve key for database);
    fun select_rows(database, query) (get rows from database selected by query);
    
}
equations {
    eq s_dec(s_enc(data, key), key) = data;
    eq a_dec(a_enc(data, pkey(skey)), skey) = data;
    eq get_db_key(key) = key;
    
}
channels {
    channel ch_comm (*)[ch];
    
}
hosts {
    host Client(rr)(ch_comm) {
        #MY_ID = id();
        #SERVER_ID = id(Server);
        #QUERY = query();

        process Client1(ch_comm) {
            M1 = (MY_ID, SERVER_ID, QUERY);
            out(ch_comm: M1);
            in(ch_comm: M2: |*, MY_ID|);
        }
    }

    host Server(rr)(ch_comm) {
        #MY_ID = id();
        #KSTORE_ID = id(KeysStore);
        #DB_KEY = nonce();
        #DB = s_enc(database(), DB_KEY);
        #SK_S = skey();
        #K_S_KS = nonce();

        process Server1(ch_comm) {
            while(true) {
                in(ch_comm: M1: |*, MY_ID, query()|);

                CLIENT_ID = M1[0];
                QUERY = M1[2];

                subprocess get_db_key(ch_comm) {
                    R = (MY_ID, KSTORE_ID, key_request());
                    out (ch_comm: R);
                    in (ch_comm: E_TMP_DB_KEY_MSG: |*, MY_ID, key_response()|);
                    TMP_DB_KEY = s_dec(E_TMP_DB_KEY_MSG[3], K_S_KS)[AES,256,CBC,32B,1];
                }
                subprocess decrypt_aes_128_sim_100() {
                    DB_PLAINTEXT = s_dec(DB, TMP_DB_KEY)[AES,128,CBC,300MB,100];
                    
                }
                subprocess decrypt_aes_256_sim_100() {
                    DB_PLAINTEXT = s_dec(DB, TMP_DB_KEY)[AES,256,CBC,300MB,100];
                    
                }
                subprocess get_db() {
                    DB_PLAINTEXT = s_dec(DB, DB_KEY);
                    
                }
                subprocess select_rows_100() {
                    ROWS = select_rows(DB_PLAINTEXT, QUERY)[100];
                }
                subprocess get_rows() {
                    M2 = (MY_ID, CLIENT_ID, ROWS);
                }
                subprocess get_rows_with_hash_and_signature_100() {
                    H = hash(ROWS)[SHA1,1MB,100];
                    SGN = sign(H, SK_S)[20B,RSA,2048,100];
                    M2 = (MY_ID, CLIENT_ID, ROWS,SGN);
                }
                out(ch_comm: M2);
            }
        }
    }

    host KeysStore(rr)(ch_comm) {
        #MY_ID = id();
        #DB_KEY = nonce();
        #K_S_KS = nonce();
        process Store1(ch_comm) {
            while (true) {
                in (ch_comm: Request: |*, MY_ID, key_request()|);
                KEY = s_enc(get_db_key(DB_KEY), K_S_KS)[AES,256,CBC,32B,1];
                M = (MY_ID, Request[0], key_response(), KEY);
                out(ch_comm: M);
            }
        }
    }
    
}

communication {
    medium[ch] {
        default_q = 1;

        topology {
            Client <-> Server;
            Server <-> KeysStore;
        }
    }
}